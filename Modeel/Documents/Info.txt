Custom File Transfer System

DEVELOPER POWER SHELL VISUAL STUDIO


Create certificate:
makecert -r -pe -n "CN=MyTestCertificate" -b 01/01/2010 -e 01/01/2030 -eku 1.3.6.1.5.5.7.3.1 -ss my -sr localMachine -sky exchange -sp "Microsoft RSA SChannel Cryptographic Provider" -sy 12 MyTestCertificate.cer -sv MyTestCertificate.pvk

Create trusted certificate for server:
makecert -r -pe -n "CN=MyTestCertificateServer" -b 01/01/2010 -e 01/01/2030 -eku 1.3.6.1.5.5.7.3.1 -ss root -sr localMachine -sky exchange -sp "Microsoft RSA SChannel Cryptographic Provider" -sy 12 MyTestCertificateServer.cer -sv MyTestCertificateServer.pvk

Create trusted certificate for client:
makecert -r -pe -n "CN=MyTestCertificateClient" -b 01/01/2010 -e 01/01/2030 -eku 1.3.6.1.5.5.7.3.2 -ss root -sr localMachine -sky exchange -sp "Microsoft RSA SChannel Cryptographic Provider" -sy 12 MyTestCertificateClient.cer -sv MyTestCertificateClient.pvk


Convert to PFX
pvk2pfx -pvk MyTestCertificateServer.pvk -spc MyTestCertificateServer.cer -pfx MyTestCertificateServer.pfx
pvk2pfx -pvk MyTestCertificateClient.pvk -spc MyTestCertificateClient.cer -pfx MyTestCertificateClient.pfx
Documentation:
https://learn.microsoft.com/en-us/windows/win32/seccrypto/makecert
https://blog.jayway.com/2014/09/03/creating-self-signed-certificates-with-makecert-exe-for-development/
https://github.com/chronoxor/NetCoreServer
https://www.youtube.com/watch?v=j9QmMEWmcfo



TOR CONTROL COMMANDS
https://gitweb.torproject.org/torspec.git/tree/control-spec.txt
GETCONF SocksPort
SETEVENTS CIRC
SIGNAL HEARTBEAT
GETINFO circuit-status
netstat -an
https://en.wikipedia.org/wiki/SOCKS
GETINFO stream-status


Bud urobime dictionary a pri prace so suborom bude vlozeny nazov suboru a lock k nemu ako value, alebo ideme do sql
https://www.youtube.com/watch?v=ayp3tHEkRc0
https://sqlitebrowser.org/dl/
https://www.connectionstrings.com/sqlite/
https://sqliteonline.com/
Integer in sqlite ma 8bytes(64bit) a long v c# tiez, takze ziaden problem pre long




FILES SCHEME:

#region Properties



#endregion Properties

#region PublicFields


        
#endregion PublicFields

#region PrivateFields


        
#endregion PrivateFields

#region ProtectedFields



#endregion ProtectedFields

#region Ctor



#endregion Ctor

#region PublicMethods



#endregion PublicMethods

#region PrivateMethods



#endregion PrivateMethods

#region ProtectedMethods


        
#endregion ProtectedMethods

#region Events


        
#endregion Events

#region OverridedMethods


        
#endregion OverridedMethods

Numeric Data Types:

sbyte: 8-bit signed integer. Range: -128 to 127. Memory: 1 byte.
byte: 8-bit unsigned integer. Range: 0 to 255. Memory: 1 byte.
short (Int16): 16-bit signed integer. Range: -32,768 to 32,767. Memory: 2 bytes.
ushort (UInt16): 16-bit unsigned integer. Range: 0 to 65,535. Memory: 2 bytes.
int (Int32): 32-bit signed integer. Range: -2,147,483,648 to 2,147,483,647. Memory: 4 bytes.
uint (UInt32): 32-bit unsigned integer. Range: 0 to 4,294,967,295. Memory: 4 bytes.
long (Int64): 64-bit signed integer. Range: -9,223,372,036,854,775,808 to 9,223,372,036,854,775,807. Memory: 8 bytes.
ulong (UInt64): 64-bit unsigned integer. Range: 0 to 18,446,744,073,709,551,615. Memory: 8 bytes.
float: 32-bit single-precision floating-point. Memory: 4 bytes.
double: 64-bit double-precision floating-point. Memory: 8 bytes.
decimal: 128-bit decimal. Precision: 28-29 significant digits. Memory: 16 bytes.
Character Data Types:

char: 16-bit Unicode character. Memory: 2 bytes.
Boolean Data Type:

bool: Represents true or false values. Memory: Typically 1 byte. 




// nested datagrid for dictionary
<DataGrid Style="{DynamicResource DataGridStyle1}" 
          CellStyle="{DynamicResource DataGridCellStyle1}"
          ColumnHeaderStyle="{DynamicResource DataGridColumnHeaderStyle1}" 
          RowStyle="{DynamicResource DataGridRowStyle1}"
          Grid.Column="2"
          x:Name="dtgOfferingFiles"
          d:ItemsSource="{d:SampleData ItemCount=4}">
              
    <DataGrid.Columns>
        <DataGridTextColumn Header="OfferingFileIdentificator" IsReadOnly="True" CanUserResize="False" Width="auto" Binding="{Binding OfferingFileIdentificator}"/>
                                            <DataGridTextColumn Header="FileName" IsReadOnly="True" CanUserResize="False" Width="auto" Binding="{Binding FileName}"/>
                                            <DataGridTextColumn Header="FileSize" IsReadOnly="True" CanUserResize="False" Width="auto" Binding="{Binding FileSize}"/>
        
        <DataGridTemplateColumn Header="Operations" IsReadOnly="True" Width="auto">
            <DataGridTemplateColumn.CellTemplate>
                <DataTemplate>
                    <StackPanel Orientation="Horizontal">
                        <Button Content="Download identificator" Style="{StaticResource DataGridButtonStyle}" Click="btnDownloadOfferingFile_Click" Tag="{Binding}" x:Name="btnDownloadOfferingFile"/>
                    </StackPanel>
                </DataTemplate>
            </DataGridTemplateColumn.CellTemplate>
        </DataGridTemplateColumn>

        <!-- Column to show EndpointsAndGrades dictionary -->
        <DataGridTemplateColumn Header="EndpointsAndGrades" Width="auto">
            <DataGridTemplateColumn.CellTemplate>
                <DataTemplate>
                    <ListView ItemsSource="{Binding EndpointsAndGrades}">
                        <ListView.View>
                            <GridView>
                                <GridViewColumn Header="Endpoint" Width="100" DisplayMemberBinding="{Binding Path=Key}"/>
                                <GridViewColumn Header="Grade" Width="50" DisplayMemberBinding="{Binding Path=Value}"/>
                            </GridView>
                        </ListView.View>
                    </ListView>
                </DataTemplate>
            </DataGridTemplateColumn.CellTemplate>
        </DataGridTemplateColumn>

    </DataGrid.Columns>
</DataGrid>

// Default
<DataGrid Style="{DynamicResource DataGridStyle1}" CellStyle="{DynamicResource DataGridCellStyle1}" ColumnHeaderStyle="{DynamicResource DataGridColumnHeaderStyle1}" RowStyle="{DynamicResource DataGridRowStyle1}"
                                              Grid.Column="2"
                                              x:Name="dtgOfferingFiles"
                                              d:ItemsSource="{d:SampleData ItemCount=4}">

                                        <DataGrid.Columns>
                                            <DataGridTextColumn Header="OfferingFileIdentificator" IsReadOnly="True" CanUserResize="False" Width="auto" Binding="{Binding OfferingFileIdentificator}"/>
                                            <DataGridTextColumn Header="FileName" IsReadOnly="True" CanUserResize="False" Width="auto" Binding="{Binding FileName}"/>
                                            <DataGridTextColumn Header="FileSize" IsReadOnly="True" CanUserResize="False" Width="auto" Binding="{Binding FileSize}"/>

                                            <DataGridTemplateColumn Header="Operations" IsReadOnly="True" Width="auto">
                                                <DataGridTemplateColumn.CellTemplate>
                                                    <DataTemplate>
                                                        <StackPanel Orientation="Horizontal">
                                                            <Button Content="Save Identificator" Style="{StaticResource DataGridButtonStyle}" Click="btnSaveFileIdentificator_Click" Tag="{Binding}" x:Name="btnSaveFileIdentificator"/>
                                                        </StackPanel>
                                                    </DataTemplate>
                                                </DataGridTemplateColumn.CellTemplate>
                                            </DataGridTemplateColumn>
                                            
                                        </DataGrid.Columns>
                                    </DataGrid>


// With detail
<DataGrid Style="{DynamicResource DataGridStyle1}" CellStyle="{DynamicResource DataGridCellStyle1}" ColumnHeaderStyle="{DynamicResource DataGridColumnHeaderStyle1}" RowStyle="{DynamicResource DataGridRowStyle1}"
                                              Grid.Column="2"
                                              x:Name="dtgOfferingFiles"
                                              d:ItemsSource="{d:SampleData ItemCount=4}">

                                        <DataGrid.RowDetailsTemplate>
                                            <DataTemplate>
                                                <ItemsControl ItemsSource="{Binding EndpointsAndProperties}">
                                                    <ItemsControl.ItemTemplate>
                                                        <DataTemplate>
                                                            <StackPanel Orientation="Horizontal">
                                                                <TextBlock Text="EndPoint:" Margin="5"/>
                                                                <TextBlock Text="{Binding Key}" Margin="5"/>
                                                                <TextBlock Text="Health:" Margin="5"/>
                                                                <TextBlock Text="{Binding Value.Grade}" Margin="5"/>
                                                                <TextBlock Text="SocketType:" Margin="5"/>
                                                                <TextBlock Text="{Binding Value.TypeOfServerSocket}" Margin="5"/>
                                                            </StackPanel>
                                                        </DataTemplate>
                                                    </ItemsControl.ItemTemplate>
                                                </ItemsControl>
                                            </DataTemplate>
                                        </DataGrid.RowDetailsTemplate>

                                        <DataGrid.Columns>
                                            <DataGridTextColumn Header="OfferingFileIdentificator" IsReadOnly="True" CanUserResize="False" Width="auto" Binding="{Binding OfferingFileIdentificator}"/>
                                            <DataGridTextColumn Header="FileName" IsReadOnly="True" CanUserResize="False" Width="auto" Binding="{Binding FileName}"/>
                                            <DataGridTextColumn Header="FileSize" IsReadOnly="True" CanUserResize="False" Width="auto" Binding="{Binding FileSize}"/>

                                            <DataGridTemplateColumn Header="Operations" IsReadOnly="True" Width="auto">
                                                <DataGridTemplateColumn.CellTemplate>
                                                    <DataTemplate>
                                                        <StackPanel Orientation="Horizontal">
                                                            <Button Content="Save Identificator" Style="{StaticResource DataGridButtonStyle}" Click="btnSaveFileIdentificator_Click" Tag="{Binding}" x:Name="btnSaveFileIdentificator"/>
                                                        </StackPanel>
                                                    </DataTemplate>
                                                </DataGridTemplateColumn.CellTemplate>
                                            </DataGridTemplateColumn>
                                            
                                        </DataGrid.Columns>
                                    </DataGrid>



ChatGPT
Áno, kryptografické podpisy hrajú kľúčovú úlohu v PBFT (Practical Byzantine Fault Tolerance) protokole. Poďme sa pozrieť na to, kde a ako sú v PBFT používané kryptografické podpisy:

Fáza predloženia (Pre-Prepare):

Veducí uzol (leader) vytvorí návrh na nový blok a odosiela ho ostatným uzlom vo fáze "Pre-Prepare". Tento návrh je podpísaný kryptografickým podpisom veducieho uzlu.
Kryptografický podpis zabezpečuje, že ostatné uzly v sieti vedia, že správa pochádza od skutočného veducieho uzla a že nebola počas prenosu zmenená.
Fáza schválenia (Prepare):

Ostatné uzly, po prijatí návrhu, overia podpis veducieho uzla. Po overení vytvoria svoj vlastný podpis potvrdzujúci, že súhlasia s návrhom, a túto potvrdenú správu (s ich vlastným kryptografickým podpisom) rozosielajú ostatným uzlom.
Fáza potvrdenia (Commit):

Po prijatí dostatočného počtu potvrdení (zvyčajne 2/3 +1) od ostatných uzlov, uzly vytvoria ďalší podpis potvrdzujúci, že sú pripravené zaradiť nový blok do blockchainu. Táto správa je tiež podpísaná ich vlastným kryptografickým podpisom.
Fáza finalizácie:

Keď uzol prijme dostatočné množstvo potvrdzujúcich správ, zaradí nový blok do svojho blockchainu. Podpisy na potvrzujúcich správach zabezpečujú, že uzol vie, že väčšina siete súhlasí s pridaním nového bloku.
Celý tento proces zabezpečuje konsenzus v distribuovanej sieti aj v prítomnosti byzantských chýb (t.j., nečestných alebo zlyhávajúcich uzlov). Kryptografické podpisy sú neoddeliteľnou súčasťou tohto procesu, pretože zabezpečujú autentifikáciu, integritu a neodvolateľnosť komunikácie medzi uzlami.